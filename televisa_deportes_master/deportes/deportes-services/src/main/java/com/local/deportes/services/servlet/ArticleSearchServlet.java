package com.local.deportes.services.servlet;import com.day.cq.search.*;import com.televisa.commons.services.datamodel.Note;import com.televisa.commons.services.datamodel.objects.ImageAsset;import com.televisa.commons.services.datamodel.objects.Rendition;import com.televisa.commons.services.services.NoteManagerService;import com.televisa.commons.services.services.NoteManagerServiceFactory;import com.televisa.commons.services.utilities.Constants;import com.televisa.commons.services.utilities.Utilities;import org.apache.felix.scr.annotations.Reference;import org.apache.felix.scr.annotations.sling.SlingServlet;import com.day.cq.commons.TidyJSONWriter;import com.day.cq.search.result.Hit;import com.day.cq.search.result.SearchResult;import com.day.text.Text;import java.io.IOException;import java.io.Writer;import java.util.Calendar;import java.util.HashMap;import java.util.Map;import javax.jcr.Session;import javax.servlet.ServletException;import org.apache.sling.api.SlingHttpServletRequest;import org.apache.sling.api.SlingHttpServletResponse;import org.apache.sling.api.resource.ResourceResolver;import org.apache.sling.api.servlets.SlingAllMethodsServlet;import org.slf4j.Logger;import org.slf4j.LoggerFactory;@SlingServlet(        label = "Televisa Article Search Servlet",        methods = { "GET" },        paths = {"/bin/generics/articlesearch"},        extensions = {"json"},        metatype = false)public class ArticleSearchServlet extends SlingAllMethodsServlet{    private static final long serialVersionUID = -1L;        private static final Logger LOG = LoggerFactory.getLogger(ArticleSearchServlet.class);    private static final String CQ_TEMPLATE_PROPERTY_NAME = "@jcr:content/cq:template";    private static final String CQ_VIDEO_TYPE_PROPERTY_NAME = "@jcr:content/video/videoPlayer";    private static final String CQ_LAST_REPLICATION_ACTION_PROPERTY_NAME = "jcr:content/@cq:lastReplicationAction";        public static final String NOTICIEROS_CONTENT_PATH = "/content/televisa/deportes";        private static final String ARTICLE_TEMPLATE = "/apps/deportes/local/components/page/genericNote";    private static final String VIDEO_TEMPLATE = "/apps/deportes/local/templates/video/video";    private static final String GALLERY_TEMPLATE = "/apps/deportes/local/templates/photo/gallery";        @Reference    NoteManagerServiceFactory noteManagerServiceFactory;    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response)    throws ServletException, IOException{        ResourceResolver resourceResolver = request.getResourceResolver();        //set the correct content type and charset        response.setContentType("application/json");        response.setCharacterEncoding("utf-8");        //get the articleType selector, could be any of the following values:        //'all', 'video', 'article' or 'gallery'        String[] selectors = request.getRequestPathInfo().getSelectors();        String articleType = selectors.length == 1? selectors[0] : ""; //if the request path has more than one selector, we ignore them        String orderBy = request.getParameter("orderby"); //the property to order by e.g. jcr:created        String sorted = request.getParameter("sorted"); //the sort type: ascending or descending        String queryString = request.getParameter("query"); //the string to search for        String videoType = request.getParameter("videoType");//if it's a video, it could be 8 for brightcove videos or 13 for youtube videos        Long start = Long.valueOf(request.getParameter("start"));//where to start the query        Long limit = Long.valueOf(request.getParameter("limit"));//how many results do we return        Query query;        QueryBuilder builder = resourceResolver.adaptTo(QueryBuilder.class);        Session mySession =  resourceResolver.adaptTo(Session.class);        Map<String, String> map = new HashMap<String, String>();//a map containing the query properties        map.put("path", NOTICIEROS_CONTENT_PATH); //path of the query        map.put("type", "cq:Page"); //type of the results        map.put("fulltext.relPath", "jcr:content/@jcr:title");//start the search from the jcr:content node        map.put("fulltext", queryString);        if("all".equals(articleType)){//search for all 3 types of notes: articles videos and photogalleries            map.put("property",CQ_LAST_REPLICATION_ACTION_PROPERTY_NAME);            map.put("property.value","Activate");//only search for activated pages            map.put("1_property", CQ_TEMPLATE_PROPERTY_NAME);            map.put("1_property.1_value", VIDEO_TEMPLATE);            map.put("1_property.2_value", GALLERY_TEMPLATE);            map.put("1_property.3_value", ARTICLE_TEMPLATE);        }else{//if we have to search for a specific type of note            map.put("group.p.and", "true"); //create a group            map.put("group.1_property",CQ_LAST_REPLICATION_ACTION_PROPERTY_NAME);            map.put("group.1_property.value","Activate");                        if(articleType.equals(Constants.ARTICLE)){//if we are searching for articles                map.put("group.2_property", CQ_TEMPLATE_PROPERTY_NAME);                map.put("group.2_value",  ARTICLE_TEMPLATE);            }else if(articleType.equals(Constants.GALLERY)){//if we are searching for photogalleries                map.put("group.2_property",CQ_TEMPLATE_PROPERTY_NAME);                map.put("group.2_value", GALLERY_TEMPLATE);            }else if(articleType.equals(Constants.VIDEO)){//if we are searching for videos                map.put("group.2_property",CQ_TEMPLATE_PROPERTY_NAME);                map.put("group.2_value", VIDEO_TEMPLATE);                if(videoType != null){//if we need to refine even more the video search to include only brightcove or youtube videos                    map.put("group.3_property",CQ_VIDEO_TYPE_PROPERTY_NAME);                    map.put("group.3_value", videoType);                }            }        }        map.put("orderby", orderBy != null ? orderBy : "@jcr:content/cq:firstReplicated");        map.put("orderby.sort", sorted != null ? sorted : "desc");        query = builder.createQuery(PredicateGroup.create(map), mySession);        //sets the start of the query, offset        query.setStart(start);        //sets the hitsPerPage of the query, limit        query.setHitsPerPage(limit);        try{            SearchResult result = query.getResult();            // write to the debug log the query statement            if(LOG.isDebugEnabled()){                LOG.debug(">Article Search Servlet<");                LOG.debug("Query = {}", result.getQueryStatement());            }            Writer out = response.getWriter();            TidyJSONWriter writer = new TidyJSONWriter(out);            writer.setTidy("true".equals(request.getParameter("tidy")));            writer.object();            writer.key("hits");            writer.array();            for (Hit hit : result.getHits()) { //loop through the search results                String path = hit.getPath();                writer.object();                writer.key("name").value(Text.getName(path)); //add the name of the page                writer.key("path").value(path); //add the path of the page                writer.key("title").value(hit.getTitle()); //add the title of the page                if (noteManagerServiceFactory != null) {                    NoteManagerService service = noteManagerServiceFactory.getService(NoteManagerService.class);                    if (service != null) {                        Note note = service.getNote(path); //we get the note object from the page path                        String excerpt = note.getDescription();                        writer.key("excerpt").value(excerpt == null ? "" : excerpt); //we set the excerpt as the page's description or summary                        Calendar firstPublishedDate = note.getFirstPubDate(); //we get the date when the page was first published                        String firstPublishedDateString = Utilities.beautifyDate(firstPublishedDate);                        writer.key("published").value(firstPublishedDateString); //set the first published date                        ImageAsset imageAsset = note.getNoteImageAsset(); //we get the note's image asset                        if(imageAsset != null){                            Rendition rendition = imageAsset.getRendition(48,48); //we get the smallest rendition                            String renditionPath = rendition == null? imageAsset.getPath() : rendition.getPath();                            writer.key("image").value(renditionPath); //we add the rendition to the json object                        }                    }                }                writer.endObject(); //end the json object            }            writer.endArray(); //end the json array            writer.key("results").value(result.getTotalMatches()); //set the total results            writer.endObject(); //end the parent json object        } catch (Exception e) {            LOG.error("Exception: " + e.getMessage());            LOG.error("Check the stderr log for the full stack trace");            e.printStackTrace();        }    }}